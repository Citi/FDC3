import { Context } from "../context/ContextTypes";
import { ContextType } from "../context/ContextType";
import { AppIdentifier } from "../api/AppIdentifier";
import { AppMetadata } from "../api/AppMetadata";
import { AppIntent } from "../api/AppIntent";
import { ImplementationMetadata } from "../api/ImplementationMetadata";
import { DisplayMetadata } from "../api/DisplayMetadata";
import { ContextMetadata } from "../api/ContextMetadata";

type BCPMeta = {
	messageId: string;
};

/**
 * Messages initiated by DA (inbound)
 */

export type BCPBroadcastInbound = {
	type: "BroadcastInbound";
	payload: {
		context: Context;
		channel?: string;
	};
	meta: BCPMeta;
};

// Sent from library to DA, and then also received by library from DA
export type BCPIntentResult = {
	type: "raiseIntentResult";
	payload: {
		context?: Context;
		channel?: {
			channelId: string;
			type: "user" | "app" | "private";
		};
		// This will match the responseId from a previous BCPRaiseIntentResponse message
		responseId: string;
	};
	meta: BCPMeta;
};

// Increment subscriber count
export type BCPPrivateChannelOnAddContextListener = {
	type: "privateChannelOnAddContextListener";
	payload: {
		channelId: string;
		contextType?: string;
	};
	meta: BCPMeta;
};

export type BCPPrivateChannelOnDisconnect = {
	type: "privateChannelOnDisconnect";
	payload: {
		channelId: string;
	};
	meta: BCPMeta;
};

// Decrement subscriber count
export type BCPPrivateChannelOnUnsubscribe = {
	type: "privateChannelOnUnsubscribe";
	payload: {
		channelId: string;
		contextType?: string;
	};
	meta: BCPMeta;
};

export type BCPRaiseIntentInbound = {
	type: "raiseIntentInbound";
	payload: {
		intent: string;
		context: Context;
		metadata ?: ContextMetadata;
		responseId: string; // generated by DA
	};
	meta: BCPMeta;
};

/**
 * Messages responses from DA
 */

export type BCPAck = {
	type: "ack";
	payload: {
		error?: string;
	}
	meta: BCPMeta;
}

export type BCPCreatePrivateChannelResponse = {
	type: "createPrivateChannelResponse";
	payload: {
		error?: string;
		channel ?: {
			channelId: string;
			type: "private";
			displayMetadata ?: DisplayMetadata;
		}
	};
	meta: BCPMeta;
};

export type BCPFindInstancesResponse = {
	type: "findInstancesResponse";
	payload: {
		error?: string;
		instances: Array<AppIdentifier>;
	};
	meta: BCPMeta;
};

export type BCPFindIntentResponse = {
	type: "findIntentResponse";
	payload: {
		error?: string;
		appIntent?: AppIntent;
	};
	meta: BCPMeta;
};

export type BCPFindIntentsByContextResponse = {
	type: "findIntentsByContextResponse";
	payload: {
		error?: string;
		appIntents: Array<AppIntent>;
	};
	meta: BCPMeta;
};

export type BCPGetAppMetadataResponse = {
	type: "getAppMetadataResponse";
	payload: {
		error?: string;
		appMetadata?: AppMetadata;
	};
	meta: BCPMeta;
};

export type BCPGetCurrentChannelResponse = {
	type: "getCurrentChannelResponse";
	payload: {
		error?: string;
		channel?: {
			id: string;
			displayMetadata ?: DisplayMetadata;
		}
	};
	meta: BCPMeta;
};

export type BCPGetCurrentContextResponse = {
	type: "getCurrentContextResponse";
	payload: {
		error?: string;
		context?: Context;
	};
	meta: BCPMeta;
};

export type BCPGetInfoResponse = {
	type: "getInfoResponse";
	payload: {
		error?: string;
		implementationMetadata?: ImplementationMetadata;
	};
	meta: BCPMeta;
};

export type BCPGetOrCreateChannelResponse = {
	type: "getOrCreateChannelResponse";
	payload: {
		error?: string;
		channel ?: {
			channelId: string;
			type: "user" | "app" | "private";
			displayMetadata ?: DisplayMetadata;
		}
	};
	meta: BCPMeta;
};

export type BCPGetUserChannelsResponse = {
	type: "getUserChannelsResponse";
	payload: {
		error?: string;
		channels: Array<{
			id: string;
			displayMetadata ?: DisplayMetadata;
		}>;
	};
	meta: BCPMeta;
};

export type BCPOpenResponse = {
	type: "openResponse";
	payload: {
		error?: string;
		appIdentifier?: AppIdentifier;
	};
	meta: BCPMeta;
};

export type BCPRaiseIntentResponse = {
	type: "raiseIntentResponse";
	payload: {
		error?: string;
		data?: {
			source: AppMetadata;
			intent: string;
			version?: string;
			// Use this to match up future inbound BCPRaiseIntentResult messages
			responseId: string;
		};
	};
	meta: BCPMeta;
};

/**
 * Messages initiated by client (outbound)
 */

export type BCPAddContextListener = {
	type: "addContextListener";
	payload: {
		contextType: ContextType;
		// Set if the listener was added to a specific channel
		channel?: string;
	};
	meta: BCPMeta;
};

export type BCPAddIntentListener = {
	type: "addIntentListener";
	payload: {
		intent: string;
	};
	meta: BCPMeta;
};

export type BCPBroadcast = {
	type: "broadcast";
	payload: {
		context: Context;
		channelId?: string;
	};
	meta: BCPMeta;
};

export type BCPCreatePrivateClient = {
	type: "createPrivateClient";
	meta: BCPMeta;
};

export type BCPFindInstances = {
	type: "findInstances";
	app: AppIdentifier;
	meta: BCPMeta;
};

export type BCPFindIntent = {
	type: "findIntent";
	payload: {
		intent: string;
		context?: Context;
		resultType?: string;
	};
	meta: BCPMeta;
};

export type BCPFindIntentsByContext = {
	type: "findIntentsByContext";
	payload: {
		context?: Context;
		resultType?: string;
	};
	meta: BCPMeta;
};

export type BCPGetAppMetadata = {
	type: "getAppMetadata";
	payload: {
		app: AppIdentifier;
	}
	meta: BCPMeta;
};

export type BCPGetCurrentChannel = {
	type: "getCurrentChannel";
	meta: BCPMeta;
};

export type BCPGetCurrentContext = {
	type: "getCurrentContext";
	payload: {
		contextType?: string;
		channelId?: string;
	};
	meta: BCPMeta;
};

export type BCPGetInfo = {
	type: "getInfo";
	meta: BCPMeta;
};

export type BCPGetOrCreateChannel = {
	type: "getOrCreateChannel";
	payload: {
		channelId: string
	}
	meta: BCPMeta;
};

export type BCPGetUserChannels = {
	type: "getUserChannels";
	meta: BCPMeta;
};

export type BCPJoinUserChannel = {
	type: "joinUserChannel";
	payload: {
		channelId: string;
	};
	meta: BCPMeta;
};

export type BCPLeaveCurrentChannel = {
	type: "leaveCurrentChannel";
	meta: BCPMeta;
};

export type BCPOpen = {
	type: "open";
	payload: {
		app: AppIdentifier | string;
		context?: Context;
	};
	meta: BCPMeta;
};

export type BCPPrivateChannelDisconnect = {
	type: "privateChannelDisconnect";
	payload: {
		channelId: string;
	};
	meta: BCPMeta;
};

export type BCPRaiseIntent = {
	type: "raiseIntent";
	payload: {
		intent: string | null;
		context: Context;
		app ?: AppIdentifier;
	};
	meta: BCPMeta;
};

export type BCPRaiseIntentForContext = {
	type: "raiseIntentForContext";
	payload: {
		context?: Context;
		app?: AppIdentifier
	};
	meta: BCPMeta;
};

export type BCPRemoveContextListener = {
	type: "removeContextListener";
	payload: {
		contextType?: ContextType;
		channel?: string;
	};
	meta: BCPMeta;
};

export type BCPRemoveIntentListener = {
	type: "removeIntentListener";
	payload: {
		intent: string;
	};
	meta: BCPMeta;
};

/**
 * Intent resolver protocol
 */

TODO define these and add them to the corresponding sections

export type BCPMessageInbound =
	BCPBroadcastInbound |
	BCPIntentResult |
	BCPPrivateChannelOnAddContextListener |
	BCPPrivateChannelOnDisconnect |
	BCPPrivateChannelOnUnsubscribe |
	BCPRaiseIntentInbound;

export type BCPMessageResponse =
	BCPAck |
	BCPCreatePrivateChannelResponse |
	BCPFindInstancesResponse |
	BCPFindIntentResponse |
	BCPFindIntentsByContextResponse |
	BCPGetAppMetadataResponse |
	BCPGetCurrentChannelResponse |
	BCPGetCurrentContextResponse |
	BCPGetInfoResponse |
	BCPGetOrCreateChannelResponse |
	BCPGetUserChannelsResponse |
	BCPOpenResponse |
	BCPRaiseIntentResponse;

export type BCPMessageOutbound =
	BCPAddContextListener |
	BCPAddIntentListener |
	BCPBroadcast |
	BCPCreatePrivateClient |
	BCPFindInstances |
	BCPFindIntent |
	BCPFindIntentsByContext |
	BCPGetAppMetadata |
	BCPGetCurrentChannel |
	BCPGetCurrentContext |
	BCPGetInfo |
	BCPGetOrCreateChannel |
	BCPGetUserChannels |
	BCPJoinUserChannel |
	BCPLeaveCurrentChannel |
	BCPOpen |
	BCPPrivateChannelDisconnect |
	BCPRaiseIntent |
	BCPRaiseIntentForContext |
	BCPRemoveContextListener |
	BCPRemoveIntentListener;

export type BCPMessage = BCPMessageInbound | BCPMessageOutbound | BCPMessageResponse;

// Returns a new type that equals the member of an original type
export type Member<T, K extends keyof T> = T[K];

export type BCPType = Member<BCPMessage, "type">;